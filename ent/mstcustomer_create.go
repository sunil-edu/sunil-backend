// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/mstcustomer"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MstCustomerCreate is the builder for creating a MstCustomer entity.
type MstCustomerCreate struct {
	config
	mutation *MstCustomerMutation
	hooks    []Hook
}

// SetCustDet sets the "CustDet" field.
func (mcc *MstCustomerCreate) SetCustDet(s string) *MstCustomerCreate {
	mcc.mutation.SetCustDet(s)
	return mcc
}

// SetCustCode sets the "CustCode" field.
func (mcc *MstCustomerCreate) SetCustCode(s string) *MstCustomerCreate {
	mcc.mutation.SetCustCode(s)
	return mcc
}

// SetCustAddr sets the "CustAddr" field.
func (mcc *MstCustomerCreate) SetCustAddr(s string) *MstCustomerCreate {
	mcc.mutation.SetCustAddr(s)
	return mcc
}

// SetCustPlace sets the "CustPlace" field.
func (mcc *MstCustomerCreate) SetCustPlace(s string) *MstCustomerCreate {
	mcc.mutation.SetCustPlace(s)
	return mcc
}

// SetCustContact sets the "CustContact" field.
func (mcc *MstCustomerCreate) SetCustContact(s string) *MstCustomerCreate {
	mcc.mutation.SetCustContact(s)
	return mcc
}

// SetCustTel sets the "CustTel" field.
func (mcc *MstCustomerCreate) SetCustTel(s string) *MstCustomerCreate {
	mcc.mutation.SetCustTel(s)
	return mcc
}

// SetCustEmail sets the "CustEmail" field.
func (mcc *MstCustomerCreate) SetCustEmail(s string) *MstCustomerCreate {
	mcc.mutation.SetCustEmail(s)
	return mcc
}

// SetCustUrl sets the "CustUrl" field.
func (mcc *MstCustomerCreate) SetCustUrl(s string) *MstCustomerCreate {
	mcc.mutation.SetCustUrl(s)
	return mcc
}

// SetCustBanner1 sets the "CustBanner1" field.
func (mcc *MstCustomerCreate) SetCustBanner1(s string) *MstCustomerCreate {
	mcc.mutation.SetCustBanner1(s)
	return mcc
}

// SetCustBanner2 sets the "CustBanner2" field.
func (mcc *MstCustomerCreate) SetCustBanner2(s string) *MstCustomerCreate {
	mcc.mutation.SetCustBanner2(s)
	return mcc
}

// SetCustLogoUrl sets the "CustLogoUrl" field.
func (mcc *MstCustomerCreate) SetCustLogoUrl(s string) *MstCustomerCreate {
	mcc.mutation.SetCustLogoUrl(s)
	return mcc
}

// Mutation returns the MstCustomerMutation object of the builder.
func (mcc *MstCustomerCreate) Mutation() *MstCustomerMutation {
	return mcc.mutation
}

// Save creates the MstCustomer in the database.
func (mcc *MstCustomerCreate) Save(ctx context.Context) (*MstCustomer, error) {
	var (
		err  error
		node *MstCustomer
	)
	if len(mcc.hooks) == 0 {
		if err = mcc.check(); err != nil {
			return nil, err
		}
		node, err = mcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstCustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mcc.check(); err != nil {
				return nil, err
			}
			mcc.mutation = mutation
			if node, err = mcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mcc.hooks) - 1; i >= 0; i-- {
			if mcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mcc *MstCustomerCreate) SaveX(ctx context.Context) *MstCustomer {
	v, err := mcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcc *MstCustomerCreate) Exec(ctx context.Context) error {
	_, err := mcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcc *MstCustomerCreate) ExecX(ctx context.Context) {
	if err := mcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcc *MstCustomerCreate) check() error {
	if _, ok := mcc.mutation.CustDet(); !ok {
		return &ValidationError{Name: "CustDet", err: errors.New(`ent: missing required field "CustDet"`)}
	}
	if v, ok := mcc.mutation.CustDet(); ok {
		if err := mstcustomer.CustDetValidator(v); err != nil {
			return &ValidationError{Name: "CustDet", err: fmt.Errorf(`ent: validator failed for field "CustDet": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustCode(); !ok {
		return &ValidationError{Name: "CustCode", err: errors.New(`ent: missing required field "CustCode"`)}
	}
	if v, ok := mcc.mutation.CustCode(); ok {
		if err := mstcustomer.CustCodeValidator(v); err != nil {
			return &ValidationError{Name: "CustCode", err: fmt.Errorf(`ent: validator failed for field "CustCode": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustAddr(); !ok {
		return &ValidationError{Name: "CustAddr", err: errors.New(`ent: missing required field "CustAddr"`)}
	}
	if v, ok := mcc.mutation.CustAddr(); ok {
		if err := mstcustomer.CustAddrValidator(v); err != nil {
			return &ValidationError{Name: "CustAddr", err: fmt.Errorf(`ent: validator failed for field "CustAddr": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustPlace(); !ok {
		return &ValidationError{Name: "CustPlace", err: errors.New(`ent: missing required field "CustPlace"`)}
	}
	if v, ok := mcc.mutation.CustPlace(); ok {
		if err := mstcustomer.CustPlaceValidator(v); err != nil {
			return &ValidationError{Name: "CustPlace", err: fmt.Errorf(`ent: validator failed for field "CustPlace": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustContact(); !ok {
		return &ValidationError{Name: "CustContact", err: errors.New(`ent: missing required field "CustContact"`)}
	}
	if v, ok := mcc.mutation.CustContact(); ok {
		if err := mstcustomer.CustContactValidator(v); err != nil {
			return &ValidationError{Name: "CustContact", err: fmt.Errorf(`ent: validator failed for field "CustContact": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustTel(); !ok {
		return &ValidationError{Name: "CustTel", err: errors.New(`ent: missing required field "CustTel"`)}
	}
	if v, ok := mcc.mutation.CustTel(); ok {
		if err := mstcustomer.CustTelValidator(v); err != nil {
			return &ValidationError{Name: "CustTel", err: fmt.Errorf(`ent: validator failed for field "CustTel": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustEmail(); !ok {
		return &ValidationError{Name: "CustEmail", err: errors.New(`ent: missing required field "CustEmail"`)}
	}
	if v, ok := mcc.mutation.CustEmail(); ok {
		if err := mstcustomer.CustEmailValidator(v); err != nil {
			return &ValidationError{Name: "CustEmail", err: fmt.Errorf(`ent: validator failed for field "CustEmail": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustUrl(); !ok {
		return &ValidationError{Name: "CustUrl", err: errors.New(`ent: missing required field "CustUrl"`)}
	}
	if v, ok := mcc.mutation.CustUrl(); ok {
		if err := mstcustomer.CustUrlValidator(v); err != nil {
			return &ValidationError{Name: "CustUrl", err: fmt.Errorf(`ent: validator failed for field "CustUrl": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustBanner1(); !ok {
		return &ValidationError{Name: "CustBanner1", err: errors.New(`ent: missing required field "CustBanner1"`)}
	}
	if v, ok := mcc.mutation.CustBanner1(); ok {
		if err := mstcustomer.CustBanner1Validator(v); err != nil {
			return &ValidationError{Name: "CustBanner1", err: fmt.Errorf(`ent: validator failed for field "CustBanner1": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustBanner2(); !ok {
		return &ValidationError{Name: "CustBanner2", err: errors.New(`ent: missing required field "CustBanner2"`)}
	}
	if v, ok := mcc.mutation.CustBanner2(); ok {
		if err := mstcustomer.CustBanner2Validator(v); err != nil {
			return &ValidationError{Name: "CustBanner2", err: fmt.Errorf(`ent: validator failed for field "CustBanner2": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustLogoUrl(); !ok {
		return &ValidationError{Name: "CustLogoUrl", err: errors.New(`ent: missing required field "CustLogoUrl"`)}
	}
	if v, ok := mcc.mutation.CustLogoUrl(); ok {
		if err := mstcustomer.CustLogoUrlValidator(v); err != nil {
			return &ValidationError{Name: "CustLogoUrl", err: fmt.Errorf(`ent: validator failed for field "CustLogoUrl": %w`, err)}
		}
	}
	return nil
}

func (mcc *MstCustomerCreate) sqlSave(ctx context.Context) (*MstCustomer, error) {
	_node, _spec := mcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mcc *MstCustomerCreate) createSpec() (*MstCustomer, *sqlgraph.CreateSpec) {
	var (
		_node = &MstCustomer{config: mcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mstcustomer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mstcustomer.FieldID,
			},
		}
	)
	if value, ok := mcc.mutation.CustDet(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustDet,
		})
		_node.CustDet = value
	}
	if value, ok := mcc.mutation.CustCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustCode,
		})
		_node.CustCode = value
	}
	if value, ok := mcc.mutation.CustAddr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustAddr,
		})
		_node.CustAddr = value
	}
	if value, ok := mcc.mutation.CustPlace(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustPlace,
		})
		_node.CustPlace = value
	}
	if value, ok := mcc.mutation.CustContact(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustContact,
		})
		_node.CustContact = value
	}
	if value, ok := mcc.mutation.CustTel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustTel,
		})
		_node.CustTel = value
	}
	if value, ok := mcc.mutation.CustEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustEmail,
		})
		_node.CustEmail = value
	}
	if value, ok := mcc.mutation.CustUrl(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustUrl,
		})
		_node.CustUrl = value
	}
	if value, ok := mcc.mutation.CustBanner1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustBanner1,
		})
		_node.CustBanner1 = value
	}
	if value, ok := mcc.mutation.CustBanner2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustBanner2,
		})
		_node.CustBanner2 = value
	}
	if value, ok := mcc.mutation.CustLogoUrl(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustLogoUrl,
		})
		_node.CustLogoUrl = value
	}
	return _node, _spec
}

// MstCustomerCreateBulk is the builder for creating many MstCustomer entities in bulk.
type MstCustomerCreateBulk struct {
	config
	builders []*MstCustomerCreate
}

// Save creates the MstCustomer entities in the database.
func (mccb *MstCustomerCreateBulk) Save(ctx context.Context) ([]*MstCustomer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mccb.builders))
	nodes := make([]*MstCustomer, len(mccb.builders))
	mutators := make([]Mutator, len(mccb.builders))
	for i := range mccb.builders {
		func(i int, root context.Context) {
			builder := mccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MstCustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mccb *MstCustomerCreateBulk) SaveX(ctx context.Context) []*MstCustomer {
	v, err := mccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mccb *MstCustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := mccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mccb *MstCustomerCreateBulk) ExecX(ctx context.Context) {
	if err := mccb.Exec(ctx); err != nil {
		panic(err)
	}
}
