// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"myeduate/ent/mstcustomer"
	"myeduate/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MstCustomerUpdate is the builder for updating MstCustomer entities.
type MstCustomerUpdate struct {
	config
	hooks    []Hook
	mutation *MstCustomerMutation
}

// Where appends a list predicates to the MstCustomerUpdate builder.
func (mcu *MstCustomerUpdate) Where(ps ...predicate.MstCustomer) *MstCustomerUpdate {
	mcu.mutation.Where(ps...)
	return mcu
}

// SetCustDet sets the "CustDet" field.
func (mcu *MstCustomerUpdate) SetCustDet(s string) *MstCustomerUpdate {
	mcu.mutation.SetCustDet(s)
	return mcu
}

// SetCustCode sets the "CustCode" field.
func (mcu *MstCustomerUpdate) SetCustCode(s string) *MstCustomerUpdate {
	mcu.mutation.SetCustCode(s)
	return mcu
}

// SetCustAddr sets the "CustAddr" field.
func (mcu *MstCustomerUpdate) SetCustAddr(s string) *MstCustomerUpdate {
	mcu.mutation.SetCustAddr(s)
	return mcu
}

// SetCustPlace sets the "CustPlace" field.
func (mcu *MstCustomerUpdate) SetCustPlace(s string) *MstCustomerUpdate {
	mcu.mutation.SetCustPlace(s)
	return mcu
}

// SetCustContact sets the "CustContact" field.
func (mcu *MstCustomerUpdate) SetCustContact(s string) *MstCustomerUpdate {
	mcu.mutation.SetCustContact(s)
	return mcu
}

// SetCustTel sets the "CustTel" field.
func (mcu *MstCustomerUpdate) SetCustTel(s string) *MstCustomerUpdate {
	mcu.mutation.SetCustTel(s)
	return mcu
}

// SetCustEmail sets the "CustEmail" field.
func (mcu *MstCustomerUpdate) SetCustEmail(s string) *MstCustomerUpdate {
	mcu.mutation.SetCustEmail(s)
	return mcu
}

// SetCustUrl sets the "CustUrl" field.
func (mcu *MstCustomerUpdate) SetCustUrl(s string) *MstCustomerUpdate {
	mcu.mutation.SetCustUrl(s)
	return mcu
}

// SetCustBanner1 sets the "CustBanner1" field.
func (mcu *MstCustomerUpdate) SetCustBanner1(s string) *MstCustomerUpdate {
	mcu.mutation.SetCustBanner1(s)
	return mcu
}

// SetCustBanner2 sets the "CustBanner2" field.
func (mcu *MstCustomerUpdate) SetCustBanner2(s string) *MstCustomerUpdate {
	mcu.mutation.SetCustBanner2(s)
	return mcu
}

// SetCustLogoUrl sets the "CustLogoUrl" field.
func (mcu *MstCustomerUpdate) SetCustLogoUrl(s string) *MstCustomerUpdate {
	mcu.mutation.SetCustLogoUrl(s)
	return mcu
}

// Mutation returns the MstCustomerMutation object of the builder.
func (mcu *MstCustomerUpdate) Mutation() *MstCustomerMutation {
	return mcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mcu *MstCustomerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mcu.hooks) == 0 {
		if err = mcu.check(); err != nil {
			return 0, err
		}
		affected, err = mcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstCustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mcu.check(); err != nil {
				return 0, err
			}
			mcu.mutation = mutation
			affected, err = mcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mcu.hooks) - 1; i >= 0; i-- {
			if mcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mcu *MstCustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := mcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcu *MstCustomerUpdate) Exec(ctx context.Context) error {
	_, err := mcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcu *MstCustomerUpdate) ExecX(ctx context.Context) {
	if err := mcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcu *MstCustomerUpdate) check() error {
	if v, ok := mcu.mutation.CustDet(); ok {
		if err := mstcustomer.CustDetValidator(v); err != nil {
			return &ValidationError{Name: "CustDet", err: fmt.Errorf("ent: validator failed for field \"CustDet\": %w", err)}
		}
	}
	if v, ok := mcu.mutation.CustCode(); ok {
		if err := mstcustomer.CustCodeValidator(v); err != nil {
			return &ValidationError{Name: "CustCode", err: fmt.Errorf("ent: validator failed for field \"CustCode\": %w", err)}
		}
	}
	if v, ok := mcu.mutation.CustAddr(); ok {
		if err := mstcustomer.CustAddrValidator(v); err != nil {
			return &ValidationError{Name: "CustAddr", err: fmt.Errorf("ent: validator failed for field \"CustAddr\": %w", err)}
		}
	}
	if v, ok := mcu.mutation.CustPlace(); ok {
		if err := mstcustomer.CustPlaceValidator(v); err != nil {
			return &ValidationError{Name: "CustPlace", err: fmt.Errorf("ent: validator failed for field \"CustPlace\": %w", err)}
		}
	}
	if v, ok := mcu.mutation.CustContact(); ok {
		if err := mstcustomer.CustContactValidator(v); err != nil {
			return &ValidationError{Name: "CustContact", err: fmt.Errorf("ent: validator failed for field \"CustContact\": %w", err)}
		}
	}
	if v, ok := mcu.mutation.CustTel(); ok {
		if err := mstcustomer.CustTelValidator(v); err != nil {
			return &ValidationError{Name: "CustTel", err: fmt.Errorf("ent: validator failed for field \"CustTel\": %w", err)}
		}
	}
	if v, ok := mcu.mutation.CustEmail(); ok {
		if err := mstcustomer.CustEmailValidator(v); err != nil {
			return &ValidationError{Name: "CustEmail", err: fmt.Errorf("ent: validator failed for field \"CustEmail\": %w", err)}
		}
	}
	if v, ok := mcu.mutation.CustUrl(); ok {
		if err := mstcustomer.CustUrlValidator(v); err != nil {
			return &ValidationError{Name: "CustUrl", err: fmt.Errorf("ent: validator failed for field \"CustUrl\": %w", err)}
		}
	}
	if v, ok := mcu.mutation.CustBanner1(); ok {
		if err := mstcustomer.CustBanner1Validator(v); err != nil {
			return &ValidationError{Name: "CustBanner1", err: fmt.Errorf("ent: validator failed for field \"CustBanner1\": %w", err)}
		}
	}
	if v, ok := mcu.mutation.CustBanner2(); ok {
		if err := mstcustomer.CustBanner2Validator(v); err != nil {
			return &ValidationError{Name: "CustBanner2", err: fmt.Errorf("ent: validator failed for field \"CustBanner2\": %w", err)}
		}
	}
	if v, ok := mcu.mutation.CustLogoUrl(); ok {
		if err := mstcustomer.CustLogoUrlValidator(v); err != nil {
			return &ValidationError{Name: "CustLogoUrl", err: fmt.Errorf("ent: validator failed for field \"CustLogoUrl\": %w", err)}
		}
	}
	return nil
}

func (mcu *MstCustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mstcustomer.Table,
			Columns: mstcustomer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mstcustomer.FieldID,
			},
		},
	}
	if ps := mcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcu.mutation.CustDet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustDet,
		})
	}
	if value, ok := mcu.mutation.CustCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustCode,
		})
	}
	if value, ok := mcu.mutation.CustAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustAddr,
		})
	}
	if value, ok := mcu.mutation.CustPlace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustPlace,
		})
	}
	if value, ok := mcu.mutation.CustContact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustContact,
		})
	}
	if value, ok := mcu.mutation.CustTel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustTel,
		})
	}
	if value, ok := mcu.mutation.CustEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustEmail,
		})
	}
	if value, ok := mcu.mutation.CustUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustUrl,
		})
	}
	if value, ok := mcu.mutation.CustBanner1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustBanner1,
		})
	}
	if value, ok := mcu.mutation.CustBanner2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustBanner2,
		})
	}
	if value, ok := mcu.mutation.CustLogoUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustLogoUrl,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mstcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MstCustomerUpdateOne is the builder for updating a single MstCustomer entity.
type MstCustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MstCustomerMutation
}

// SetCustDet sets the "CustDet" field.
func (mcuo *MstCustomerUpdateOne) SetCustDet(s string) *MstCustomerUpdateOne {
	mcuo.mutation.SetCustDet(s)
	return mcuo
}

// SetCustCode sets the "CustCode" field.
func (mcuo *MstCustomerUpdateOne) SetCustCode(s string) *MstCustomerUpdateOne {
	mcuo.mutation.SetCustCode(s)
	return mcuo
}

// SetCustAddr sets the "CustAddr" field.
func (mcuo *MstCustomerUpdateOne) SetCustAddr(s string) *MstCustomerUpdateOne {
	mcuo.mutation.SetCustAddr(s)
	return mcuo
}

// SetCustPlace sets the "CustPlace" field.
func (mcuo *MstCustomerUpdateOne) SetCustPlace(s string) *MstCustomerUpdateOne {
	mcuo.mutation.SetCustPlace(s)
	return mcuo
}

// SetCustContact sets the "CustContact" field.
func (mcuo *MstCustomerUpdateOne) SetCustContact(s string) *MstCustomerUpdateOne {
	mcuo.mutation.SetCustContact(s)
	return mcuo
}

// SetCustTel sets the "CustTel" field.
func (mcuo *MstCustomerUpdateOne) SetCustTel(s string) *MstCustomerUpdateOne {
	mcuo.mutation.SetCustTel(s)
	return mcuo
}

// SetCustEmail sets the "CustEmail" field.
func (mcuo *MstCustomerUpdateOne) SetCustEmail(s string) *MstCustomerUpdateOne {
	mcuo.mutation.SetCustEmail(s)
	return mcuo
}

// SetCustUrl sets the "CustUrl" field.
func (mcuo *MstCustomerUpdateOne) SetCustUrl(s string) *MstCustomerUpdateOne {
	mcuo.mutation.SetCustUrl(s)
	return mcuo
}

// SetCustBanner1 sets the "CustBanner1" field.
func (mcuo *MstCustomerUpdateOne) SetCustBanner1(s string) *MstCustomerUpdateOne {
	mcuo.mutation.SetCustBanner1(s)
	return mcuo
}

// SetCustBanner2 sets the "CustBanner2" field.
func (mcuo *MstCustomerUpdateOne) SetCustBanner2(s string) *MstCustomerUpdateOne {
	mcuo.mutation.SetCustBanner2(s)
	return mcuo
}

// SetCustLogoUrl sets the "CustLogoUrl" field.
func (mcuo *MstCustomerUpdateOne) SetCustLogoUrl(s string) *MstCustomerUpdateOne {
	mcuo.mutation.SetCustLogoUrl(s)
	return mcuo
}

// Mutation returns the MstCustomerMutation object of the builder.
func (mcuo *MstCustomerUpdateOne) Mutation() *MstCustomerMutation {
	return mcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mcuo *MstCustomerUpdateOne) Select(field string, fields ...string) *MstCustomerUpdateOne {
	mcuo.fields = append([]string{field}, fields...)
	return mcuo
}

// Save executes the query and returns the updated MstCustomer entity.
func (mcuo *MstCustomerUpdateOne) Save(ctx context.Context) (*MstCustomer, error) {
	var (
		err  error
		node *MstCustomer
	)
	if len(mcuo.hooks) == 0 {
		if err = mcuo.check(); err != nil {
			return nil, err
		}
		node, err = mcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstCustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mcuo.check(); err != nil {
				return nil, err
			}
			mcuo.mutation = mutation
			node, err = mcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mcuo.hooks) - 1; i >= 0; i-- {
			if mcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mcuo *MstCustomerUpdateOne) SaveX(ctx context.Context) *MstCustomer {
	node, err := mcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mcuo *MstCustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := mcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcuo *MstCustomerUpdateOne) ExecX(ctx context.Context) {
	if err := mcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcuo *MstCustomerUpdateOne) check() error {
	if v, ok := mcuo.mutation.CustDet(); ok {
		if err := mstcustomer.CustDetValidator(v); err != nil {
			return &ValidationError{Name: "CustDet", err: fmt.Errorf("ent: validator failed for field \"CustDet\": %w", err)}
		}
	}
	if v, ok := mcuo.mutation.CustCode(); ok {
		if err := mstcustomer.CustCodeValidator(v); err != nil {
			return &ValidationError{Name: "CustCode", err: fmt.Errorf("ent: validator failed for field \"CustCode\": %w", err)}
		}
	}
	if v, ok := mcuo.mutation.CustAddr(); ok {
		if err := mstcustomer.CustAddrValidator(v); err != nil {
			return &ValidationError{Name: "CustAddr", err: fmt.Errorf("ent: validator failed for field \"CustAddr\": %w", err)}
		}
	}
	if v, ok := mcuo.mutation.CustPlace(); ok {
		if err := mstcustomer.CustPlaceValidator(v); err != nil {
			return &ValidationError{Name: "CustPlace", err: fmt.Errorf("ent: validator failed for field \"CustPlace\": %w", err)}
		}
	}
	if v, ok := mcuo.mutation.CustContact(); ok {
		if err := mstcustomer.CustContactValidator(v); err != nil {
			return &ValidationError{Name: "CustContact", err: fmt.Errorf("ent: validator failed for field \"CustContact\": %w", err)}
		}
	}
	if v, ok := mcuo.mutation.CustTel(); ok {
		if err := mstcustomer.CustTelValidator(v); err != nil {
			return &ValidationError{Name: "CustTel", err: fmt.Errorf("ent: validator failed for field \"CustTel\": %w", err)}
		}
	}
	if v, ok := mcuo.mutation.CustEmail(); ok {
		if err := mstcustomer.CustEmailValidator(v); err != nil {
			return &ValidationError{Name: "CustEmail", err: fmt.Errorf("ent: validator failed for field \"CustEmail\": %w", err)}
		}
	}
	if v, ok := mcuo.mutation.CustUrl(); ok {
		if err := mstcustomer.CustUrlValidator(v); err != nil {
			return &ValidationError{Name: "CustUrl", err: fmt.Errorf("ent: validator failed for field \"CustUrl\": %w", err)}
		}
	}
	if v, ok := mcuo.mutation.CustBanner1(); ok {
		if err := mstcustomer.CustBanner1Validator(v); err != nil {
			return &ValidationError{Name: "CustBanner1", err: fmt.Errorf("ent: validator failed for field \"CustBanner1\": %w", err)}
		}
	}
	if v, ok := mcuo.mutation.CustBanner2(); ok {
		if err := mstcustomer.CustBanner2Validator(v); err != nil {
			return &ValidationError{Name: "CustBanner2", err: fmt.Errorf("ent: validator failed for field \"CustBanner2\": %w", err)}
		}
	}
	if v, ok := mcuo.mutation.CustLogoUrl(); ok {
		if err := mstcustomer.CustLogoUrlValidator(v); err != nil {
			return &ValidationError{Name: "CustLogoUrl", err: fmt.Errorf("ent: validator failed for field \"CustLogoUrl\": %w", err)}
		}
	}
	return nil
}

func (mcuo *MstCustomerUpdateOne) sqlSave(ctx context.Context) (_node *MstCustomer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mstcustomer.Table,
			Columns: mstcustomer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mstcustomer.FieldID,
			},
		},
	}
	id, ok := mcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MstCustomer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mstcustomer.FieldID)
		for _, f := range fields {
			if !mstcustomer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mstcustomer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcuo.mutation.CustDet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustDet,
		})
	}
	if value, ok := mcuo.mutation.CustCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustCode,
		})
	}
	if value, ok := mcuo.mutation.CustAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustAddr,
		})
	}
	if value, ok := mcuo.mutation.CustPlace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustPlace,
		})
	}
	if value, ok := mcuo.mutation.CustContact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustContact,
		})
	}
	if value, ok := mcuo.mutation.CustTel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustTel,
		})
	}
	if value, ok := mcuo.mutation.CustEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustEmail,
		})
	}
	if value, ok := mcuo.mutation.CustUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustUrl,
		})
	}
	if value, ok := mcuo.mutation.CustBanner1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustBanner1,
		})
	}
	if value, ok := mcuo.mutation.CustBanner2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustBanner2,
		})
	}
	if value, ok := mcuo.mutation.CustLogoUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustLogoUrl,
		})
	}
	_node = &MstCustomer{config: mcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mstcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
