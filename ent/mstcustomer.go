// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"myeduate/ent/mstcustomer"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// MstCustomer is the model entity for the MstCustomer schema.
type MstCustomer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CustDet holds the value of the "CustDet" field.
	CustDet string `json:"CustDet,omitempty"`
	// CustCode holds the value of the "CustCode" field.
	CustCode string `json:"CustCode,omitempty"`
	// CustAddr holds the value of the "CustAddr" field.
	CustAddr string `json:"CustAddr,omitempty"`
	// CustPlace holds the value of the "CustPlace" field.
	CustPlace string `json:"CustPlace,omitempty"`
	// CustContact holds the value of the "CustContact" field.
	CustContact string `json:"CustContact,omitempty"`
	// CustTel holds the value of the "CustTel" field.
	CustTel string `json:"CustTel,omitempty"`
	// CustEmail holds the value of the "CustEmail" field.
	CustEmail string `json:"CustEmail,omitempty"`
	// CustUrl holds the value of the "CustUrl" field.
	CustUrl string `json:"CustUrl,omitempty"`
	// CustBanner1 holds the value of the "CustBanner1" field.
	CustBanner1 string `json:"CustBanner1,omitempty"`
	// CustBanner2 holds the value of the "CustBanner2" field.
	CustBanner2 string `json:"CustBanner2,omitempty"`
	// CustLogoUrl holds the value of the "CustLogoUrl" field.
	CustLogoUrl string `json:"CustLogoUrl,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MstCustomer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case mstcustomer.FieldID:
			values[i] = new(sql.NullInt64)
		case mstcustomer.FieldCustDet, mstcustomer.FieldCustCode, mstcustomer.FieldCustAddr, mstcustomer.FieldCustPlace, mstcustomer.FieldCustContact, mstcustomer.FieldCustTel, mstcustomer.FieldCustEmail, mstcustomer.FieldCustUrl, mstcustomer.FieldCustBanner1, mstcustomer.FieldCustBanner2, mstcustomer.FieldCustLogoUrl:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MstCustomer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MstCustomer fields.
func (mc *MstCustomer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mstcustomer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mc.ID = int(value.Int64)
		case mstcustomer.FieldCustDet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustDet", values[i])
			} else if value.Valid {
				mc.CustDet = value.String
			}
		case mstcustomer.FieldCustCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustCode", values[i])
			} else if value.Valid {
				mc.CustCode = value.String
			}
		case mstcustomer.FieldCustAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustAddr", values[i])
			} else if value.Valid {
				mc.CustAddr = value.String
			}
		case mstcustomer.FieldCustPlace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustPlace", values[i])
			} else if value.Valid {
				mc.CustPlace = value.String
			}
		case mstcustomer.FieldCustContact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustContact", values[i])
			} else if value.Valid {
				mc.CustContact = value.String
			}
		case mstcustomer.FieldCustTel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustTel", values[i])
			} else if value.Valid {
				mc.CustTel = value.String
			}
		case mstcustomer.FieldCustEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustEmail", values[i])
			} else if value.Valid {
				mc.CustEmail = value.String
			}
		case mstcustomer.FieldCustUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustUrl", values[i])
			} else if value.Valid {
				mc.CustUrl = value.String
			}
		case mstcustomer.FieldCustBanner1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustBanner1", values[i])
			} else if value.Valid {
				mc.CustBanner1 = value.String
			}
		case mstcustomer.FieldCustBanner2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustBanner2", values[i])
			} else if value.Valid {
				mc.CustBanner2 = value.String
			}
		case mstcustomer.FieldCustLogoUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustLogoUrl", values[i])
			} else if value.Valid {
				mc.CustLogoUrl = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MstCustomer.
// Note that you need to call MstCustomer.Unwrap() before calling this method if this MstCustomer
// was returned from a transaction, and the transaction was committed or rolled back.
func (mc *MstCustomer) Update() *MstCustomerUpdateOne {
	return (&MstCustomerClient{config: mc.config}).UpdateOne(mc)
}

// Unwrap unwraps the MstCustomer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mc *MstCustomer) Unwrap() *MstCustomer {
	tx, ok := mc.config.driver.(*txDriver)
	if !ok {
		panic("ent: MstCustomer is not a transactional entity")
	}
	mc.config.driver = tx.drv
	return mc
}

// String implements the fmt.Stringer.
func (mc *MstCustomer) String() string {
	var builder strings.Builder
	builder.WriteString("MstCustomer(")
	builder.WriteString(fmt.Sprintf("id=%v", mc.ID))
	builder.WriteString(", CustDet=")
	builder.WriteString(mc.CustDet)
	builder.WriteString(", CustCode=")
	builder.WriteString(mc.CustCode)
	builder.WriteString(", CustAddr=")
	builder.WriteString(mc.CustAddr)
	builder.WriteString(", CustPlace=")
	builder.WriteString(mc.CustPlace)
	builder.WriteString(", CustContact=")
	builder.WriteString(mc.CustContact)
	builder.WriteString(", CustTel=")
	builder.WriteString(mc.CustTel)
	builder.WriteString(", CustEmail=")
	builder.WriteString(mc.CustEmail)
	builder.WriteString(", CustUrl=")
	builder.WriteString(mc.CustUrl)
	builder.WriteString(", CustBanner1=")
	builder.WriteString(mc.CustBanner1)
	builder.WriteString(", CustBanner2=")
	builder.WriteString(mc.CustBanner2)
	builder.WriteString(", CustLogoUrl=")
	builder.WriteString(mc.CustLogoUrl)
	builder.WriteByte(')')
	return builder.String()
}

// MstCustomers is a parsable slice of MstCustomer.
type MstCustomers []*MstCustomer

func (mc MstCustomers) config(cfg config) {
	for _i := range mc {
		mc[_i].config = cfg
	}
}
