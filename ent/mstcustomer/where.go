// Code generated by entc, DO NOT EDIT.

package mstcustomer

import (
	"myeduate/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CustDet applies equality check predicate on the "CustDet" field. It's identical to CustDetEQ.
func CustDet(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustDet), v))
	})
}

// CustCode applies equality check predicate on the "CustCode" field. It's identical to CustCodeEQ.
func CustCode(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustCode), v))
	})
}

// CustAddr applies equality check predicate on the "CustAddr" field. It's identical to CustAddrEQ.
func CustAddr(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustAddr), v))
	})
}

// CustPlace applies equality check predicate on the "CustPlace" field. It's identical to CustPlaceEQ.
func CustPlace(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustPlace), v))
	})
}

// CustContact applies equality check predicate on the "CustContact" field. It's identical to CustContactEQ.
func CustContact(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustContact), v))
	})
}

// CustTel applies equality check predicate on the "CustTel" field. It's identical to CustTelEQ.
func CustTel(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustTel), v))
	})
}

// CustEmail applies equality check predicate on the "CustEmail" field. It's identical to CustEmailEQ.
func CustEmail(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustEmail), v))
	})
}

// CustUrl applies equality check predicate on the "CustUrl" field. It's identical to CustUrlEQ.
func CustUrl(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustUrl), v))
	})
}

// CustBanner1 applies equality check predicate on the "CustBanner1" field. It's identical to CustBanner1EQ.
func CustBanner1(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustBanner1), v))
	})
}

// CustBanner2 applies equality check predicate on the "CustBanner2" field. It's identical to CustBanner2EQ.
func CustBanner2(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustBanner2), v))
	})
}

// CustLogoUrl applies equality check predicate on the "CustLogoUrl" field. It's identical to CustLogoUrlEQ.
func CustLogoUrl(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustLogoUrl), v))
	})
}

// CustDetEQ applies the EQ predicate on the "CustDet" field.
func CustDetEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustDet), v))
	})
}

// CustDetNEQ applies the NEQ predicate on the "CustDet" field.
func CustDetNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustDet), v))
	})
}

// CustDetIn applies the In predicate on the "CustDet" field.
func CustDetIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustDet), v...))
	})
}

// CustDetNotIn applies the NotIn predicate on the "CustDet" field.
func CustDetNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustDet), v...))
	})
}

// CustDetGT applies the GT predicate on the "CustDet" field.
func CustDetGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustDet), v))
	})
}

// CustDetGTE applies the GTE predicate on the "CustDet" field.
func CustDetGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustDet), v))
	})
}

// CustDetLT applies the LT predicate on the "CustDet" field.
func CustDetLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustDet), v))
	})
}

// CustDetLTE applies the LTE predicate on the "CustDet" field.
func CustDetLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustDet), v))
	})
}

// CustDetContains applies the Contains predicate on the "CustDet" field.
func CustDetContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustDet), v))
	})
}

// CustDetHasPrefix applies the HasPrefix predicate on the "CustDet" field.
func CustDetHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustDet), v))
	})
}

// CustDetHasSuffix applies the HasSuffix predicate on the "CustDet" field.
func CustDetHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustDet), v))
	})
}

// CustDetEqualFold applies the EqualFold predicate on the "CustDet" field.
func CustDetEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustDet), v))
	})
}

// CustDetContainsFold applies the ContainsFold predicate on the "CustDet" field.
func CustDetContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustDet), v))
	})
}

// CustCodeEQ applies the EQ predicate on the "CustCode" field.
func CustCodeEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustCode), v))
	})
}

// CustCodeNEQ applies the NEQ predicate on the "CustCode" field.
func CustCodeNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustCode), v))
	})
}

// CustCodeIn applies the In predicate on the "CustCode" field.
func CustCodeIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustCode), v...))
	})
}

// CustCodeNotIn applies the NotIn predicate on the "CustCode" field.
func CustCodeNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustCode), v...))
	})
}

// CustCodeGT applies the GT predicate on the "CustCode" field.
func CustCodeGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustCode), v))
	})
}

// CustCodeGTE applies the GTE predicate on the "CustCode" field.
func CustCodeGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustCode), v))
	})
}

// CustCodeLT applies the LT predicate on the "CustCode" field.
func CustCodeLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustCode), v))
	})
}

// CustCodeLTE applies the LTE predicate on the "CustCode" field.
func CustCodeLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustCode), v))
	})
}

// CustCodeContains applies the Contains predicate on the "CustCode" field.
func CustCodeContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustCode), v))
	})
}

// CustCodeHasPrefix applies the HasPrefix predicate on the "CustCode" field.
func CustCodeHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustCode), v))
	})
}

// CustCodeHasSuffix applies the HasSuffix predicate on the "CustCode" field.
func CustCodeHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustCode), v))
	})
}

// CustCodeEqualFold applies the EqualFold predicate on the "CustCode" field.
func CustCodeEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustCode), v))
	})
}

// CustCodeContainsFold applies the ContainsFold predicate on the "CustCode" field.
func CustCodeContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustCode), v))
	})
}

// CustAddrEQ applies the EQ predicate on the "CustAddr" field.
func CustAddrEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustAddr), v))
	})
}

// CustAddrNEQ applies the NEQ predicate on the "CustAddr" field.
func CustAddrNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustAddr), v))
	})
}

// CustAddrIn applies the In predicate on the "CustAddr" field.
func CustAddrIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustAddr), v...))
	})
}

// CustAddrNotIn applies the NotIn predicate on the "CustAddr" field.
func CustAddrNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustAddr), v...))
	})
}

// CustAddrGT applies the GT predicate on the "CustAddr" field.
func CustAddrGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustAddr), v))
	})
}

// CustAddrGTE applies the GTE predicate on the "CustAddr" field.
func CustAddrGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustAddr), v))
	})
}

// CustAddrLT applies the LT predicate on the "CustAddr" field.
func CustAddrLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustAddr), v))
	})
}

// CustAddrLTE applies the LTE predicate on the "CustAddr" field.
func CustAddrLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustAddr), v))
	})
}

// CustAddrContains applies the Contains predicate on the "CustAddr" field.
func CustAddrContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustAddr), v))
	})
}

// CustAddrHasPrefix applies the HasPrefix predicate on the "CustAddr" field.
func CustAddrHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustAddr), v))
	})
}

// CustAddrHasSuffix applies the HasSuffix predicate on the "CustAddr" field.
func CustAddrHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustAddr), v))
	})
}

// CustAddrEqualFold applies the EqualFold predicate on the "CustAddr" field.
func CustAddrEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustAddr), v))
	})
}

// CustAddrContainsFold applies the ContainsFold predicate on the "CustAddr" field.
func CustAddrContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustAddr), v))
	})
}

// CustPlaceEQ applies the EQ predicate on the "CustPlace" field.
func CustPlaceEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustPlace), v))
	})
}

// CustPlaceNEQ applies the NEQ predicate on the "CustPlace" field.
func CustPlaceNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustPlace), v))
	})
}

// CustPlaceIn applies the In predicate on the "CustPlace" field.
func CustPlaceIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustPlace), v...))
	})
}

// CustPlaceNotIn applies the NotIn predicate on the "CustPlace" field.
func CustPlaceNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustPlace), v...))
	})
}

// CustPlaceGT applies the GT predicate on the "CustPlace" field.
func CustPlaceGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustPlace), v))
	})
}

// CustPlaceGTE applies the GTE predicate on the "CustPlace" field.
func CustPlaceGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustPlace), v))
	})
}

// CustPlaceLT applies the LT predicate on the "CustPlace" field.
func CustPlaceLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustPlace), v))
	})
}

// CustPlaceLTE applies the LTE predicate on the "CustPlace" field.
func CustPlaceLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustPlace), v))
	})
}

// CustPlaceContains applies the Contains predicate on the "CustPlace" field.
func CustPlaceContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustPlace), v))
	})
}

// CustPlaceHasPrefix applies the HasPrefix predicate on the "CustPlace" field.
func CustPlaceHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustPlace), v))
	})
}

// CustPlaceHasSuffix applies the HasSuffix predicate on the "CustPlace" field.
func CustPlaceHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustPlace), v))
	})
}

// CustPlaceEqualFold applies the EqualFold predicate on the "CustPlace" field.
func CustPlaceEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustPlace), v))
	})
}

// CustPlaceContainsFold applies the ContainsFold predicate on the "CustPlace" field.
func CustPlaceContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustPlace), v))
	})
}

// CustContactEQ applies the EQ predicate on the "CustContact" field.
func CustContactEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustContact), v))
	})
}

// CustContactNEQ applies the NEQ predicate on the "CustContact" field.
func CustContactNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustContact), v))
	})
}

// CustContactIn applies the In predicate on the "CustContact" field.
func CustContactIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustContact), v...))
	})
}

// CustContactNotIn applies the NotIn predicate on the "CustContact" field.
func CustContactNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustContact), v...))
	})
}

// CustContactGT applies the GT predicate on the "CustContact" field.
func CustContactGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustContact), v))
	})
}

// CustContactGTE applies the GTE predicate on the "CustContact" field.
func CustContactGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustContact), v))
	})
}

// CustContactLT applies the LT predicate on the "CustContact" field.
func CustContactLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustContact), v))
	})
}

// CustContactLTE applies the LTE predicate on the "CustContact" field.
func CustContactLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustContact), v))
	})
}

// CustContactContains applies the Contains predicate on the "CustContact" field.
func CustContactContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustContact), v))
	})
}

// CustContactHasPrefix applies the HasPrefix predicate on the "CustContact" field.
func CustContactHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustContact), v))
	})
}

// CustContactHasSuffix applies the HasSuffix predicate on the "CustContact" field.
func CustContactHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustContact), v))
	})
}

// CustContactEqualFold applies the EqualFold predicate on the "CustContact" field.
func CustContactEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustContact), v))
	})
}

// CustContactContainsFold applies the ContainsFold predicate on the "CustContact" field.
func CustContactContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustContact), v))
	})
}

// CustTelEQ applies the EQ predicate on the "CustTel" field.
func CustTelEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustTel), v))
	})
}

// CustTelNEQ applies the NEQ predicate on the "CustTel" field.
func CustTelNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustTel), v))
	})
}

// CustTelIn applies the In predicate on the "CustTel" field.
func CustTelIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustTel), v...))
	})
}

// CustTelNotIn applies the NotIn predicate on the "CustTel" field.
func CustTelNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustTel), v...))
	})
}

// CustTelGT applies the GT predicate on the "CustTel" field.
func CustTelGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustTel), v))
	})
}

// CustTelGTE applies the GTE predicate on the "CustTel" field.
func CustTelGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustTel), v))
	})
}

// CustTelLT applies the LT predicate on the "CustTel" field.
func CustTelLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustTel), v))
	})
}

// CustTelLTE applies the LTE predicate on the "CustTel" field.
func CustTelLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustTel), v))
	})
}

// CustTelContains applies the Contains predicate on the "CustTel" field.
func CustTelContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustTel), v))
	})
}

// CustTelHasPrefix applies the HasPrefix predicate on the "CustTel" field.
func CustTelHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustTel), v))
	})
}

// CustTelHasSuffix applies the HasSuffix predicate on the "CustTel" field.
func CustTelHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustTel), v))
	})
}

// CustTelEqualFold applies the EqualFold predicate on the "CustTel" field.
func CustTelEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustTel), v))
	})
}

// CustTelContainsFold applies the ContainsFold predicate on the "CustTel" field.
func CustTelContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustTel), v))
	})
}

// CustEmailEQ applies the EQ predicate on the "CustEmail" field.
func CustEmailEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustEmail), v))
	})
}

// CustEmailNEQ applies the NEQ predicate on the "CustEmail" field.
func CustEmailNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustEmail), v))
	})
}

// CustEmailIn applies the In predicate on the "CustEmail" field.
func CustEmailIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustEmail), v...))
	})
}

// CustEmailNotIn applies the NotIn predicate on the "CustEmail" field.
func CustEmailNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustEmail), v...))
	})
}

// CustEmailGT applies the GT predicate on the "CustEmail" field.
func CustEmailGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustEmail), v))
	})
}

// CustEmailGTE applies the GTE predicate on the "CustEmail" field.
func CustEmailGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustEmail), v))
	})
}

// CustEmailLT applies the LT predicate on the "CustEmail" field.
func CustEmailLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustEmail), v))
	})
}

// CustEmailLTE applies the LTE predicate on the "CustEmail" field.
func CustEmailLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustEmail), v))
	})
}

// CustEmailContains applies the Contains predicate on the "CustEmail" field.
func CustEmailContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustEmail), v))
	})
}

// CustEmailHasPrefix applies the HasPrefix predicate on the "CustEmail" field.
func CustEmailHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustEmail), v))
	})
}

// CustEmailHasSuffix applies the HasSuffix predicate on the "CustEmail" field.
func CustEmailHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustEmail), v))
	})
}

// CustEmailEqualFold applies the EqualFold predicate on the "CustEmail" field.
func CustEmailEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustEmail), v))
	})
}

// CustEmailContainsFold applies the ContainsFold predicate on the "CustEmail" field.
func CustEmailContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustEmail), v))
	})
}

// CustUrlEQ applies the EQ predicate on the "CustUrl" field.
func CustUrlEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustUrl), v))
	})
}

// CustUrlNEQ applies the NEQ predicate on the "CustUrl" field.
func CustUrlNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustUrl), v))
	})
}

// CustUrlIn applies the In predicate on the "CustUrl" field.
func CustUrlIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustUrl), v...))
	})
}

// CustUrlNotIn applies the NotIn predicate on the "CustUrl" field.
func CustUrlNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustUrl), v...))
	})
}

// CustUrlGT applies the GT predicate on the "CustUrl" field.
func CustUrlGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustUrl), v))
	})
}

// CustUrlGTE applies the GTE predicate on the "CustUrl" field.
func CustUrlGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustUrl), v))
	})
}

// CustUrlLT applies the LT predicate on the "CustUrl" field.
func CustUrlLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustUrl), v))
	})
}

// CustUrlLTE applies the LTE predicate on the "CustUrl" field.
func CustUrlLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustUrl), v))
	})
}

// CustUrlContains applies the Contains predicate on the "CustUrl" field.
func CustUrlContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustUrl), v))
	})
}

// CustUrlHasPrefix applies the HasPrefix predicate on the "CustUrl" field.
func CustUrlHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustUrl), v))
	})
}

// CustUrlHasSuffix applies the HasSuffix predicate on the "CustUrl" field.
func CustUrlHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustUrl), v))
	})
}

// CustUrlEqualFold applies the EqualFold predicate on the "CustUrl" field.
func CustUrlEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustUrl), v))
	})
}

// CustUrlContainsFold applies the ContainsFold predicate on the "CustUrl" field.
func CustUrlContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustUrl), v))
	})
}

// CustBanner1EQ applies the EQ predicate on the "CustBanner1" field.
func CustBanner1EQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1NEQ applies the NEQ predicate on the "CustBanner1" field.
func CustBanner1NEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1In applies the In predicate on the "CustBanner1" field.
func CustBanner1In(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustBanner1), v...))
	})
}

// CustBanner1NotIn applies the NotIn predicate on the "CustBanner1" field.
func CustBanner1NotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustBanner1), v...))
	})
}

// CustBanner1GT applies the GT predicate on the "CustBanner1" field.
func CustBanner1GT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1GTE applies the GTE predicate on the "CustBanner1" field.
func CustBanner1GTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1LT applies the LT predicate on the "CustBanner1" field.
func CustBanner1LT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1LTE applies the LTE predicate on the "CustBanner1" field.
func CustBanner1LTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1Contains applies the Contains predicate on the "CustBanner1" field.
func CustBanner1Contains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1HasPrefix applies the HasPrefix predicate on the "CustBanner1" field.
func CustBanner1HasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1HasSuffix applies the HasSuffix predicate on the "CustBanner1" field.
func CustBanner1HasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1EqualFold applies the EqualFold predicate on the "CustBanner1" field.
func CustBanner1EqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1ContainsFold applies the ContainsFold predicate on the "CustBanner1" field.
func CustBanner1ContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustBanner1), v))
	})
}

// CustBanner2EQ applies the EQ predicate on the "CustBanner2" field.
func CustBanner2EQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2NEQ applies the NEQ predicate on the "CustBanner2" field.
func CustBanner2NEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2In applies the In predicate on the "CustBanner2" field.
func CustBanner2In(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustBanner2), v...))
	})
}

// CustBanner2NotIn applies the NotIn predicate on the "CustBanner2" field.
func CustBanner2NotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustBanner2), v...))
	})
}

// CustBanner2GT applies the GT predicate on the "CustBanner2" field.
func CustBanner2GT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2GTE applies the GTE predicate on the "CustBanner2" field.
func CustBanner2GTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2LT applies the LT predicate on the "CustBanner2" field.
func CustBanner2LT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2LTE applies the LTE predicate on the "CustBanner2" field.
func CustBanner2LTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2Contains applies the Contains predicate on the "CustBanner2" field.
func CustBanner2Contains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2HasPrefix applies the HasPrefix predicate on the "CustBanner2" field.
func CustBanner2HasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2HasSuffix applies the HasSuffix predicate on the "CustBanner2" field.
func CustBanner2HasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2EqualFold applies the EqualFold predicate on the "CustBanner2" field.
func CustBanner2EqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2ContainsFold applies the ContainsFold predicate on the "CustBanner2" field.
func CustBanner2ContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustBanner2), v))
	})
}

// CustLogoUrlEQ applies the EQ predicate on the "CustLogoUrl" field.
func CustLogoUrlEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustLogoUrl), v))
	})
}

// CustLogoUrlNEQ applies the NEQ predicate on the "CustLogoUrl" field.
func CustLogoUrlNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustLogoUrl), v))
	})
}

// CustLogoUrlIn applies the In predicate on the "CustLogoUrl" field.
func CustLogoUrlIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustLogoUrl), v...))
	})
}

// CustLogoUrlNotIn applies the NotIn predicate on the "CustLogoUrl" field.
func CustLogoUrlNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustLogoUrl), v...))
	})
}

// CustLogoUrlGT applies the GT predicate on the "CustLogoUrl" field.
func CustLogoUrlGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustLogoUrl), v))
	})
}

// CustLogoUrlGTE applies the GTE predicate on the "CustLogoUrl" field.
func CustLogoUrlGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustLogoUrl), v))
	})
}

// CustLogoUrlLT applies the LT predicate on the "CustLogoUrl" field.
func CustLogoUrlLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustLogoUrl), v))
	})
}

// CustLogoUrlLTE applies the LTE predicate on the "CustLogoUrl" field.
func CustLogoUrlLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustLogoUrl), v))
	})
}

// CustLogoUrlContains applies the Contains predicate on the "CustLogoUrl" field.
func CustLogoUrlContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustLogoUrl), v))
	})
}

// CustLogoUrlHasPrefix applies the HasPrefix predicate on the "CustLogoUrl" field.
func CustLogoUrlHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustLogoUrl), v))
	})
}

// CustLogoUrlHasSuffix applies the HasSuffix predicate on the "CustLogoUrl" field.
func CustLogoUrlHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustLogoUrl), v))
	})
}

// CustLogoUrlEqualFold applies the EqualFold predicate on the "CustLogoUrl" field.
func CustLogoUrlEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustLogoUrl), v))
	})
}

// CustLogoUrlContainsFold applies the ContainsFold predicate on the "CustLogoUrl" field.
func CustLogoUrlContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustLogoUrl), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MstCustomer) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MstCustomer) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MstCustomer) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		p(s.Not())
	})
}
